{"/home/travis/build/npmtest/node-npmtest-pidusage/test.js":"/* istanbul instrument in package npmtest_pidusage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pidusage/lib.npmtest_pidusage.js":"/* istanbul instrument in package npmtest_pidusage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pidusage = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pidusage = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pidusage/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pidusage && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pidusage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pidusage\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pidusage.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pidusage.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pidusage.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pidusage.__dirname + '/lib.npmtest_pidusage.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pidusage/node_modules/pidusage/index.js":"var os = require('os')\nvar stats = require('./lib/stats')\n\nvar wrapper = function(stat_type) {\n\n  return function(pid, options, cb) {\n\n    if(typeof options == 'function') {\n      cb = options\n      options = {}\n    }\n\n    return stats[stat_type](pid, options, cb)\n  }\n}\n\nvar pusage = {\n  darwin: wrapper('ps'),\n  sunos: wrapper('ps'),\n  freebsd: wrapper('ps'),\n  netbsd: wrapper('proc'),\n  win: wrapper('win'),\n  linux: wrapper('proc'),\n  aix: wrapper('ps'),\n  unsupported: function(pid, options, cb) {\n    cb = typeof options == 'function' ? options : cb\n\n    cb(new Error(os.platform() + ' is not supported yet, please fire an issue (https://github.com/soyuka/pidusage)'))\n  }\n}\n\nvar platform = os.platform();\nplatform = platform.match(/^win/) ? 'win' : platform; //nor is windows a winner...\nplatform = pusage[platform] ? platform : 'unsupported';\n\nexports.stat = function() {\n  pusage[platform].apply(stats, [].slice.call(arguments));\n};\n\nexports.unmonitor = function(pid) {\n  delete stats.history[pid];\n};\n\nexports._history = stats.history;\n","/home/travis/build/npmtest/node-npmtest-pidusage/node_modules/pidusage/lib/stats.js":"var os = require('os')\nvar fs = require('fs')\nvar p = require('path')\nvar exec = require('child_process').exec\nvar spawn = require('child_process').spawn\nvar helpers = require('./helpers')\nvar format = require('util').format\n\nvar stats = {\n  history: {},\n  cpu: null, //used to store cpu informations\n  proc: function(pid, options, done) {\n    var self = this\n\n    if(this.cpu !== null) {\n      fs.readFile('/proc/uptime', 'utf8', function(err, uptime) {\n        if(err)\n          return done(err, null)\n\n        if(uptime === undefined) {\n          console.error(\"[pidusage] We couldn't find uptime from /proc/uptime\")\n          self.cpu.uptime = os.uptime()\n        } else {\n          self.cpu.uptime = uptime.split(' ')[0]\n        }\n\n        return self.proc_calc(pid, options, done)\n      })\n    } else {\n      helpers.cpu(function(err, cpu) {\n        if(err)\n          return done(err, null)\n\n        self.cpu = cpu\n        return self.proc_calc(pid, options, done)\n      })\n    }\n  },\n  proc_calc: function(pid, options, done) {\n    var history = this.history[pid] ? this.history[pid] : {}\n    var cpu = this.cpu\n    var self = this\n\n    //Arguments to path.join must be strings\n    fs.readFile(p.join('/proc', ''+pid, 'stat'), 'utf8', function(err, infos) {\n\n      if(err)\n        return done(err, null)\n\n      //https://github.com/arunoda/node-usage/commit/a6ca74ecb8dd452c3c00ed2bde93294d7bb75aa8\n      //preventing process space in name by removing values before last ) (pid (name) ...)\n      var index = infos.lastIndexOf(')')\n      infos = infos.substr(index + 2).split(' ')\n\n      //according to http://man7.org/linux/man-pages/man5/proc.5.html (index 0 based - 2)\n      //In kernels before Linux 2.6, start was expressed in jiffies. Since Linux 2.6, the value is expressed in clock ticks\n      var stat = {\n          utime: parseFloat(infos[11]),\n          stime: parseFloat(infos[12]),\n          cutime: parseFloat(infos[13]),\n          cstime: parseFloat(infos[14]),\n          start: parseFloat(infos[19]) / cpu.clock_tick,\n          rss: parseFloat(infos[21])\n      }\n\n      //http://stackoverflow.com/questions/16726779/total-cpu-usage-of-an-application-from-proc-pid-stat/16736599#16736599\n\n      var childrens = options.childrens ? stat.cutime + stat.cstime : 0\n\n      var total = stat.stime - (history.stime || 0) + stat.utime - (history.utime || 0) + childrens\n\n      total = total / cpu.clock_tick\n\n      //time elapsed between calls\n      var seconds = history.uptime !== undefined ? cpu.uptime - history.uptime : stat.start - cpu.uptime\n      seconds = Math.abs(seconds)\n      seconds = seconds === 0 ? 1 : seconds //we sure can't divide through 0\n\n      self.history[pid] = stat\n      self.history[pid].uptime = cpu.uptime\n\n      return done(null, {\n        cpu: (total / seconds) * 100,\n        memory: stat.rss * cpu.pagesize\n      })\n    })\n  },\n  /**\n   * Get pid informations through ps command\n   * @param  {int}   pid\n   * @return  {Function} done (err, stat)\n   * on os x skip headers with pcpu=,rss=\n   * on linux it could be --no-header\n   * on solaris 11 can't figure out a way to do this properly so...\n   */\n  ps: function(pid, options, done) {\n\n    var cmd = 'ps -o pcpu,rss -p '\n\n    if(os.platform() == 'aix')\n      cmd = 'ps -o pcpu,rssize -p ' //this one could work on other platforms\n\n    exec(cmd + pid, function(err, stdout, stderr) {\n      if(err)\n        return done(err, null)\n\n      stdout = stdout.split(os.EOL)[1]\n      stdout = stdout.replace(/^\\s+/, '').replace(/\\s\\s+/g, ' ').split(' ')\n\n      return done(null, {\n        cpu: parseFloat(stdout[0].replace(',', '.')),\n        memory: parseFloat(stdout[1]) * 1024\n      })\n    })\n  },\n  /**\n   * This is really in a beta stage\n   */\n  win: function(pid, options, done) {\n    var history = this.history[pid] ? this.history[pid] : {}\n\t\t//  http://social.msdn.microsoft.com/Forums/en-US/469ec6b7-4727-4773-9dc7-6e3de40e87b8/cpu-usage-in-for-each-active-process-how-is-this-best-determined-and-implemented-in-an?forum=csharplanguage\n    var args = 'PROCESS ' + pid + ' get workingsetsize,usermodetime,kernelmodetime'\n    var wmic = spawn('wmic', args.split(' '), {detached: true})\n    var stdout = ''\n    var stderr = ''\n    var self = this\n    var uptime = os.uptime()\n\n    wmic.stdout.on('data', function(d) {\n     stdout += d.toString()\n    })\n\n    wmic.stderr.on('data', function(d) {\n      stderr += d.toString()\n    })\n\n    wmic.on('error', function(err) {\n      console.error('[pidusage] Command \"wmic ' + args + '\" failed with error %s', err)\n    })\n\n    wmic.on('close', function(code) {\n      stdout = stdout.trim()\n      stderr = stderr.trim()\n\n      if(!stdout || code !== 0) {\n        var error = format('%s Wmic errored, please open an issue on https://github.com/soyuka/pidusage with this message.%s', new Date().toString(), os.EOL)\n        error += format('Command was \"wmic %s\", release is %s%s', args, os.release(), os.EOL)\n        stderr = error + (stderr ? format('Wmic reported the following error: %s.', stderr) : 'Wmic reported no errors.')\n        stderr = format('%s%s%s Wmic exited with code %d.%s', os.EOL, stderr, os.EOL, code, os.EOL)\n        stdout ? stderr = format('%s%s Stdout was %s', stderr, os.EOL, stdout) : null\n\n        return done(new Error(stderr , null))\n      }\n\n      stdout = stdout.split(os.EOL)[1].replace(/\\s\\s+/g, ' ').split(' ')\n\n      var stats = {\n        kernelmodetime: parseFloat(stdout[0]),\n        usermodetime: parseFloat(stdout[1]),\n      }\n\n      var workingsetsize = parseFloat(stdout[2])\n\n      //process usage since last call\n      var total = stats.kernelmodetime - (history.kernelmodetime || 0) + stats.usermodetime - (history.usermodetime || 0)\n      total = total / 10000000\n\n      //time elapsed between calls\n      var seconds = history.uptime !== undefined ? uptime - history.uptime : 0\n      seconds = Math.abs(seconds)\n      seconds = seconds === 0 ? 1 : seconds //we sure can't divide through 0\n\n      self.history[pid] = stats\n      self.history[pid].uptime = uptime\n\n      return done(null, {cpu: (total / seconds) * 100, memory: workingsetsize})\n    })\n  }\n}\n\nmodule.exports = stats;\n","/home/travis/build/npmtest/node-npmtest-pidusage/node_modules/pidusage/lib/helpers.js":"var os = require('os')\n  , exec = require('child_process').exec\n\nmodule.exports = {\n  getconf: function(keyword, options, next) {\n\n    if(typeof options == 'function') {\n      next = options\n      options = { default: '' }\n    }\n\n    exec('getconf '+keyword, function(error, stdout, stderr) {\n      if(error !== null) {\n        console.error('Error while getting '+keyword, error)\n        return next(null, options.default)\n      }\n\n      stdout = parseInt(stdout)\n\n      if(!isNaN(stdout)) {\n        return next(null, stdout)\n      }\n\n      return next(null, options.default)\n    })\n  },\n  cpu: function(next) {\n    var self = this\n\n    self.getconf('CLK_TCK', {default: 100}, function(err, clock_tick) {\n      self.getconf('PAGESIZE', {default: 4096}, function(err, pagesize) {\n\n        next(null, {\n          clock_tick: clock_tick,\n          uptime: os.uptime(),\n          pagesize: pagesize\n        })\n\n       })\n    })\n  }\n}\n"}